{"version":3,"sources":["Formula.js","Diceroll.js","App.js","serviceWorker.js","index.js"],"names":["LOWEST","HIGHEST","Symbol","type","text","this","discard","parseFloat","DieSymbol","sides","value","toString","NumberSymbol","parseSymbols","expression","symbols","parenCount","i","length","lastSymbol","push","rollOne","randomizer","r","Math","random","floor","operation","number1","symbol","number2","count","rollIntoSymbols","includes","keepCount","keepLowestOrHighest","dice","handleNoDice","Error","Array","isArray","workdice","filter","d","undefined","forEach","die","compFunc","a","b","getNumber","sort","slice","markDiscarded","performOperations","ops","newSymbols","operator","next","newSymbol","pop","subCalculate","calculate","lowerExpression","toLowerCase","pattern","RegExp","match","isMatch","countLeft","countRight","validate","rollAll","map","total","Diceroll","props","maxResults","state","formula","formulaIsInvalid","results","showHelp","error","class","role","helpSection","onClick","handleHelpClick","helpButtonClass","for","id","onKeyUp","e","handleFormulaKeyUp","onChange","setState","target","handleRollClick","renderHistory","latestIndex","th","result","index","latestClass","rowClass","resultClass","renderSymbols","reverse","renderSymbol","symbolClass","prefix","classBySides","getSymbolClass","leftParen","rightParen","renderParen","some","x","event","keyCode","Formula","addResult","splice","React","Component","App","className","href","src","width","height","alt","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAKMA,EAAS,IACTC,EAAU,IAOVC,E,WACF,WAAYC,EAAMC,GAAO,oBACrBC,KAAKF,KAAOA,EACZE,KAAKD,KAAOA,E,wDAIZ,OAXO,IAWAC,KAAKF,MAAqBE,KAAKC,QAChC,EACAC,WAAWF,KAAKD,U,KAIxBI,E,YACF,WAAYC,EAAOC,GAAQ,IAAD,8BACtB,4CAnBO,EAmBOA,EAAMC,cACfF,MAAQA,EACb,EAAKH,SAAU,EAHO,E,2BADNJ,GAQxB,SAASU,EAAaF,GAClB,OAAO,IAAIR,EA1BA,EA0BeQ,EAAMC,YAGpC,SAASE,EAAaC,GAGlB,IAFA,IAAIC,EAAU,GACVC,EAAa,EACRC,EAAI,EAAGA,EAAIH,EAAWI,OAAQD,IAAK,CACxC,IAAIE,EAAaJ,EAAQG,OAAS,EAC5BH,EAAQA,EAAQG,OAAS,GACzB,KACFF,EAAa,GAKS,MAAlBF,EAAWG,GAEXD,IAEuB,MAAlBF,EAAWG,IAEhBD,IAGAA,EAAa,IAEbD,EAAQA,EAAQG,OAAS,GAAGd,MAAQU,EAAWG,KA7DlD,MAgEIH,EAAWG,IA/Dd,MAgEFH,EAAWG,IA/DT,MAgEFH,EAAWG,IA/DX,MAgEAH,EAAWG,IA/DV,MAgEDH,EAAWG,IACXH,EAAWG,KAAOjB,GAClBc,EAAWG,KAAOhB,EAClBc,EAAQK,KAAK,IAAIlB,EA7DZ,EA6D6BY,EAAWG,KAExCH,EAAWG,IAAM,KAAOH,EAAWG,IAAM,IACzCE,GAjEF,IAiEgBA,EAAWhB,KAI1BgB,EAAWf,MAAQU,EAAWG,GAH9BF,EAAQK,KAAK,IAAIlB,EAlElB,EAkEiCY,EAAWG,KAMxB,MAAlBH,EAAWG,KAEhBD,IACAD,EAAQK,KAAK,IAAIlB,EAzEZ,EAyE6B,MAK1C,IAAK,IAAIe,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IA9EvB,IA+ELF,EAAQE,GAAGd,OACXY,EAAQE,GAAKJ,EAAaE,EAAQE,GAAGb,OAI7C,OAAOW,EAGX,SAASM,EAAQZ,EAAOa,GACpB,IAAMC,EAAID,GAAcE,KAAKC,OAC7B,OAAOD,KAAKE,MAAMH,IAAOd,GAAU,EAqCvC,SAASkB,EAAUC,EAASC,EAAQC,EAASR,GACzC,MAtIS,MAsILO,EAnCR,SAAyBE,EAAOtB,EAAOa,GAEnC,IADA,IAAIP,EAAU,GACLE,EAAI,EAAGA,EAAIc,EAAOd,IACnBF,EAAQG,OAAS,GACjBH,EAAQK,KAAK,IAAIlB,EAjGZ,EAVJ,MA6GLa,EAAQK,KAAK,IAAIZ,EAAUC,EAAOY,EAAQZ,EAAOa,KAErD,OAAOP,EA4BIiB,CAAgBJ,EAASE,EAASR,GAEzC,CAACtB,EAAQC,GAASgC,SAASJ,GA3BnC,SAAuBK,EAAWC,EAAqBC,GACnD,SAASC,IACL,MAAM,IAAIC,MAAM,qDAEfC,MAAMC,QAAQJ,IACfC,IAEJ,IAAII,EAAWL,EAAKM,QAAO,SAAAC,GAAC,YAAgBC,IAAZD,EAAElC,SACV,IAApBgC,EAASvB,QACTmB,IAEJI,EAASI,SAAQ,SAAAC,GAAG,OAAIA,EAAIxC,SAAU,KACtC,IAAMyC,EAAWZ,IAAwBnC,EACnC,SAACgD,EAAGC,GAAJ,OAAUD,EAAEE,YAAcD,EAAEC,aAC5B,SAACF,EAAGC,GAAJ,OAAUA,EAAEC,YAAcF,EAAEE,aAMlC,OALAT,EACKU,KAAKJ,GACLK,MAAMlB,GACNW,SAAQ,SAAAC,GAAG,OAAIA,EAAIxC,SAAU,KAE3B8B,EAQIiB,CAAczB,EAASC,EAAQC,GAGnClB,EAAc,WACjB,OAAQiB,GAEJ,IApJC,IAqJG,OAAOD,EAAUE,EACrB,IArJE,IAsJE,OAAOF,EAAUE,EACrB,IAtJE,IAuJE,OAAOF,EAAUE,EACrB,IAvJA,IAwJI,OAAOF,EAAUE,EACrB,QACI,OAAOF,GAZE,IAiBzB,SAAS0B,EAAkBvC,EAASwC,EAAKjC,GAGrC,IADA,IAAIkC,EAAa,GACRvC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IACpC,CACI,IAAIY,EAASd,EAAQE,GAIrB,GAAIY,EAAO1B,MAjKF,IAiKU0B,EAAO1B,MAAqBoD,EAAItB,SAASJ,EAAOzB,MACnE,CAKI,IAAMwB,EAAU4B,EAAWA,EAAWtC,OAAO,GAAGgC,YAC1CO,EAAW5B,EAAOzB,KAAK,GACvBsD,EAAO3C,EAAQE,EAAE,GAEnB0C,EAAYhC,EAAUC,EAAS6B,EADnBlB,MAAMC,QAAQkB,GAAQA,EAAOA,EAAKR,YACI5B,GACtDkC,EAAWI,MACXJ,EAAWpC,KAAKuC,GAChB1C,SAEAuC,EAAWpC,KAAKS,GAIxB,OAAO2B,EAeX,SAASK,EAAa9C,GAOlB,IADA,IAAIyC,EAAazC,EAAQqC,QAChBnC,EAAI,EAAGA,EAAIuC,EAAWtC,OAAQD,IAE/BsB,MAAMC,QAAQgB,EAAWvC,MAGzBuC,EAAWvC,GAAKL,EAAaiD,EAAaL,EAAWvC,MAa7D,OARAuC,EAAaF,EAAkBE,EAAY,CA5NjC,IACF,OA8NRA,EAAaF,EAAkBE,EAAY,CAjOlC,IACC,OAqOKtC,QAAU,EAEdsC,EAAW,GAAGN,YAId,EAwCA,OACXrC,eACAiD,UAjBJ,SAAmBhD,EAAYQ,GAE3B,IAAMyC,EAAkBjD,EAAWkD,cACnC,IAvEJ,SAAkBlD,GACd,SAASiB,EAAMF,GACX,IAAMoC,EAAU,IAAIC,OAAO,KAAKrC,EAAQ,KACxC,OAAQf,EAAWqD,MAAMF,IAAY,IAAI/C,OAE7C,IACMkD,IAAYtD,EAAWqD,MADf,qCAERE,EAAYtC,EAAM,KAClBuC,EAAavC,EAAM,KACzB,OAAOqC,GAAWC,IAAcC,EA8D3BC,CAASR,GACV,MAAM,IAAIzB,MAAM,uBAGpB,IAAIvB,EAAUF,EAAakD,GAE3B,MAAO,CACHhD,QAFJA,EA7BJ,SAASyD,EAAQzD,EAASO,GAQtB,OAFAP,EAAUuC,EAJVvC,EAAUA,EAAQ0D,KACd,SAAA5C,GAAM,OAAIU,MAAMC,QAAQX,GAAU2C,EAAQ3C,EAAQP,GAAcO,KAG/B,CAlP5B,KAkPoCP,GAC7CP,EAAUuC,EAAkBvC,EAAS,CAACf,EAAQC,IAsBpCuE,CAAQzD,EAASO,GAGvBoD,MAAOb,EAAa9C,MC7QP4D,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,WAAa,GAClB,EAAKC,MAAQ,CACTC,QAAS,KACTC,kBAAkB,EAClBC,QAAS,GACTC,UAAU,GAPC,E,sEAWT,IAAD,OACCC,EAAQ9E,KAAKyE,MAAME,iBAEjB,yBAAKI,MAAM,qBAAqBC,KAAK,SAArC,2BAIF,GACAC,EAAcjF,KAAKyE,MAAMI,SAEvB,yBAAKE,MAAM,yBACP,oCACA,2BACI,+BAAO,yCAAc,wCAAd,6CAEX,8JAKA,4BACI,4BACI,mCADJ,oGAMA,4BACI,mCADJ,+BAGA,4BACI,mCADJ,mDAGA,4BACI,mCADJ,0BAGA,4BACI,mCADJ,wDAIJ,iNAOA,uCAEI,4BACI,4BAAI,qCAAJ,2BACA,4BAAI,wCAAJ,sCACA,4BAAI,2CAAJ,2DAGR,kDAEI,4BACI,4BAAI,uCAAJ,yDACA,4BAAI,0CAAJ,kEAGR,yBAAKA,MAAM,mBACP,yBAAKA,MAAM,8BACP,4BAAQA,MAAM,eAAejF,KAAK,SAC9BoF,QAAS,kBAAM,EAAKC,oBADxB,YAMd,GACAC,EAAkB,6BACnBpF,KAAKyE,MAAMI,SAAW,UAAY,IACvC,OACI,yBAAKE,MAAM,aACP,yBAAKA,MAAM,cACP,2BAAOM,IAAI,eAAX,WACA,yBAAKN,MAAM,eACP,2BAAOjF,KAAK,OAAOiF,MAAM,eAAeO,GAAG,cACvCC,QAAS,SAACC,GAAD,OAAO,EAAKC,mBAAmBD,IACxCE,SAAU,SAACF,GAAD,OAAO,EAAKG,SAAS,CAACjB,QAASc,EAAEI,OAAOvF,WACtD,yBAAK0E,MAAM,sBACP,4BAAQA,MAAOK,EAAiBtF,KAAK,SACjCoF,QAAS,kBAAM,EAAKC,oBADxB,QAEA,4BAAQJ,MAAM,kBAAkBjF,KAAK,SACjCoF,QAAS,kBAAM,EAAKW,oBADxB,WAKXf,EACAG,EACD,yBAAKF,MAAM,WACN/E,KAAK8F,oB,sCAOlB,IAAMC,EAAc/F,KAAKyE,MAAMG,QAAQ/D,OAAS,EAC1CmF,EAAKhG,KACX,OAAOA,KAAKyE,MAAMG,QACbR,KAAI,SAAS6B,EAAQC,GAClB,IAAMC,EAAcD,IAAUH,EAAc,UAAY,GAClDK,EAAW,MAAQD,EACnBE,EAAc,SAAWF,EAC/B,OACI,yBAAKpB,MAAOqB,GACR,yBAAKrB,MAAM,YACNiB,EAAGM,cAAcL,EAAOvF,UAE7B,yBAAKqE,MAAM,YACP,0BAAMA,MAAOsB,GAAcJ,EAAO5B,YAKjDkC,Y,oCAGK7F,GACV,IAAMsF,EAAKhG,KAoBX,SAASwG,EAAahF,GAClB,IAIMiF,EAAc,UAJFjF,EAAOvB,QAAU,aAAe,KACjCuB,EAAOpB,MAClB,QAtBV,SAAwBA,EAAOC,GAc3B,IAAMqG,EAbN,SAAsBtG,GAClB,OAAOA,GACH,KAAK,EAAG,MAAO,OACf,KAAK,EAAG,MAAO,KACf,KAAK,EAAG,MAAO,KACf,KAAK,EAAG,MAAO,KACf,KAAK,GAAI,MAAO,MAChB,KAAK,GAAI,MAAO,MAChB,KAAK,GAAI,MAAO,MAChB,QACI,OAAO,MAGJuG,CAAavG,GAC5B,OAAOsG,EAAM,UACJA,EADI,YACMA,EADN,YACgBrG,GACvB,OAKUuG,CAAepF,EAAOpB,MAAOoB,EAAOzB,MAC9C,IAEN,OAAO,0BAAMgF,MAAO0B,GAAcjF,EAAOzB,MAE7C,IAAM8G,EAAYL,EAAa,CAACzG,KAAM,MAChC+G,EAAaN,EAAa,CAACzG,KAAM,MACvC,OAAOW,EAAQ0D,KAAI,SAAA5C,GACf,GAAIU,MAAMC,QAAQX,GAAS,CACvB,IAAMuF,EAAcrG,EAAQG,OAAS,IAE7BW,EAAOX,OAAS,GAChBqB,MAAMC,QAAQX,EAAO,KAE7B,OAAO,8BACFuF,EAAcF,EAAY,GAC1Bb,EAAGM,cAAc9E,GACjBuF,EAAcD,EAAa,IAIpC,OAAIpG,EAAQsG,MAAK,SAAAC,GAAC,OAAIA,EAAE7G,UAA0B,MAAhBoB,EAAOzB,KAC9B,GAEJyG,EAAahF,Q,yCAIT0F,GACO,KAAlBA,EAAMC,SACNnH,KAAK6F,oB,wCAKT7F,KAAK2F,SAAS,CAACd,UAAW7E,KAAKyE,MAAMI,a,wCAGrC,IACI,IAAMoB,EAASmB,EAAQ3D,UAAUzD,KAAKyE,MAAMC,SAC5C1E,KAAKqH,UAAUpB,GACjB,SACEjG,KAAK2F,SAAS,CAAChB,kBAAkB,O,gCAI/BsB,GACN,IAAIrB,EAAU5E,KAAKyE,MAAMG,QACzBA,EAAQ7D,KAAKkF,GACTrB,EAAQ/D,OAASb,KAAKwE,YACtBI,EAAQ0C,OAAO,EAAG,GAEtBtH,KAAK2F,SAAS,CACVf,QAASA,EACTD,kBAAkB,Q,GAlNQ4C,IAAMC,W,MCgB7BC,MAff,WACE,OACE,yBAAKC,UAAU,OACb,yBAAK3C,MAAM,8BACT,uBAAGA,MAAM,eAAe4C,KAAK,KAC3B,yBAAKC,IAAI,iBAAiBC,MAAM,KAAKC,OAAO,KAAK/C,MAAM,2BAA2BgD,IAAI,KADxF,aAMF,kBAAC,EAAD,QCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrE,MACvB,2DCZNsE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.03603b97.chunk.js","sourcesContent":["const PLUS = '+';\r\nconst MINUS = '-';\r\nconst TIMES = '*';\r\nconst DIV = '/';\r\nconst ROLL = 'd';\r\nconst LOWEST = 'l';\r\nconst HIGHEST = 'h';\r\n\r\n// symbol types\r\nconst NUMBER = 0;\r\nconst OPERATOR = 1;\r\nconst COMPOUND = 2;\r\n\r\nclass Symbol {\r\n    constructor(type, text) {\r\n        this.type = type;\r\n        this.text = text;\r\n    }\r\n\r\n    getNumber() {\r\n        return this.type !== NUMBER || !!this.discard\r\n            ? 0 \r\n            : parseFloat(this.text);\r\n    }\r\n}\r\n\r\nclass DieSymbol extends Symbol {\r\n    constructor(sides, value) {\r\n        super(NUMBER, value.toString());\r\n        this.sides = sides;\r\n        this.discard = false;\r\n    }\r\n}\r\n\r\nfunction NumberSymbol(value) {\r\n    return new Symbol(NUMBER, value.toString());\r\n}\r\n\r\nfunction parseSymbols(expression) {\r\n    let symbols = [];\r\n    let parenCount = 0;\r\n    for (let i = 0; i < expression.length; i++) {\r\n        let lastSymbol = symbols.length > 0\r\n            ? symbols[symbols.length - 1]\r\n            : null;\r\n        if (parenCount > 0)\r\n        {\r\n            // within any number of parentheses\r\n            // all characters are treated\r\n            // as part of the same expression\r\n            if (expression[i] === ')')\r\n            {\r\n                parenCount--;\r\n            }\r\n            else if (expression[i] === '(')\r\n            {\r\n                parenCount++;\r\n            }\r\n            \r\n            if (parenCount > 0)\r\n            {\r\n                symbols[symbols.length - 1].text += expression[i];\r\n            }\r\n        }\r\n        else if (expression[i] === PLUS ||\r\n            expression[i] === MINUS ||\r\n            expression[i] === TIMES ||\r\n            expression[i] === DIV ||\r\n            expression[i] === ROLL ||\r\n            expression[i] === LOWEST ||\r\n            expression[i] === HIGHEST) {\r\n            symbols.push(new Symbol(OPERATOR, expression[i]));\r\n        }\r\n        else if (expression[i] >= '0' && expression[i] <= '9') {\r\n            if (!lastSymbol || lastSymbol.type !== NUMBER) {\r\n                symbols.push(new Symbol(NUMBER, expression[i]));\r\n            }\r\n            else {\r\n                lastSymbol.text += expression[i];\r\n            }\r\n        }\r\n        else if (expression[i] === '(')\r\n        {\r\n            parenCount++;\r\n            symbols.push(new Symbol(COMPOUND, ''));\r\n        }\r\n    }\r\n\r\n    // convert COMPOUND symbols to sub-arrays.\r\n    for (let i = 0; i < symbols.length; i++) {\r\n        if (symbols[i].type === COMPOUND) {\r\n            symbols[i] = parseSymbols(symbols[i].text);\r\n        }\r\n    }\r\n    \r\n    return symbols;\r\n}\r\n\r\nfunction rollOne(sides, randomizer) {\r\n    const r = randomizer || Math.random;\r\n    return Math.floor(r() * (sides)) + 1;\r\n}\r\n\r\nfunction rollIntoSymbols(count, sides, randomizer) {\r\n    let symbols = [];\r\n    for (let i = 0; i < count; i++) {\r\n        if (symbols.length > 0) {\r\n            symbols.push(new Symbol(OPERATOR, PLUS));\r\n        }\r\n        symbols.push(new DieSymbol(sides, rollOne(sides, randomizer)));\r\n    }\r\n    return symbols;\r\n}\r\n\r\nfunction markDiscarded(keepCount, keepLowestOrHighest, dice) {\r\n    function handleNoDice() {\r\n        throw new Error(\"Can only keep highest/lowest against a dice pool.\");\r\n    }\r\n    if (!Array.isArray(dice)) {\r\n        handleNoDice();\r\n    }\r\n    let workdice = dice.filter(d => d.sides !== undefined);\r\n    if (workdice.length === 0) {\r\n        handleNoDice();\r\n    }\r\n    workdice.forEach(die => die.discard = false);\r\n    const compFunc = keepLowestOrHighest === LOWEST\r\n        ? (a, b) => a.getNumber() - b.getNumber()\r\n        : (a, b) => b.getNumber() - a.getNumber();\r\n    workdice\r\n        .sort(compFunc)\r\n        .slice(keepCount)\r\n        .forEach(die => die.discard = true);\r\n    \r\n    return dice;\r\n}\r\n    \r\nfunction operation(number1, symbol, number2, randomizer) {\r\n    if (symbol === ROLL) {\r\n        return rollIntoSymbols(number1, number2, randomizer);\r\n    }\r\n    if ([LOWEST, HIGHEST].includes(symbol)) {\r\n        return markDiscarded(number1, symbol, number2);\r\n    }\r\n\r\n    return NumberSymbol((function () {\r\n        switch (symbol)\r\n        {\r\n            case PLUS:\r\n                return number1 + number2;\r\n            case MINUS:\r\n                return number1 - number2;\r\n            case TIMES:\r\n                return number1 * number2;\r\n            case DIV:\r\n                return number1 / number2;\r\n            default:\r\n                return number1;\r\n        }\r\n    })());\r\n}\r\n\r\nfunction performOperations(symbols, ops, randomizer)\r\n{\r\n    let newSymbols = [];\r\n    for (let i = 0; i < symbols.length; i++)\r\n    {\r\n        let symbol = symbols[i];\r\n        // if the current symbol is an operator\r\n        // and is one of the current operations declared by ops,\r\n        // perform that operation now.\r\n        if (symbol.type && symbol.type === OPERATOR && ops.includes(symbol.text))\r\n        {\r\n            // effectively convert NUMBER OPERATOR NUMBER to NUMBER\r\n            \r\n            // assumes that i is not first or last in the array\r\n            // and that before and after are both numbers.\r\n            const number1 = newSymbols[newSymbols.length-1].getNumber();\r\n            const operator = symbol.text[0];\r\n            const next = symbols[i+1];\r\n            const number2 = Array.isArray(next) ? next : next.getNumber();\r\n            let newSymbol = operation(number1, operator, number2, randomizer);\r\n            newSymbols.pop();\r\n            newSymbols.push(newSymbol);\r\n            i++;\r\n        } else {\r\n            newSymbols.push(symbol);\r\n        }\r\n    }\r\n\r\n    return newSymbols;\r\n}\r\n\r\nfunction validate(expression) {\r\n    function count(symbol) {\r\n        const pattern = new RegExp('\\\\'+symbol, \"g\");\r\n        return (expression.match(pattern) || []).length;\r\n    }\r\n    const regex = /^\\(*\\d+(\\)*[dhl+\\-*/]\\(*\\d+)*\\)*$/;\r\n    const isMatch = !!expression.match(regex);\r\n    const countLeft = count('(');\r\n    const countRight = count(')');\r\n    return isMatch && countLeft === countRight;\r\n}\r\n\r\nfunction subCalculate(symbols) {\r\n    // order of operations is R-P-MD-AS\r\n    // where R = roll dice\r\n    // Dice should already be rolled and processed into symbols.\r\n\r\n    // find parentheses first\r\n    let newSymbols = symbols.slice();\r\n    for (let i = 0; i < newSymbols.length; i++) {\r\n\r\n        if (Array.isArray(newSymbols[i]))\r\n        {\r\n            // convert COMPOUND to NUMBER via recursion\r\n            newSymbols[i] = NumberSymbol(subCalculate(newSymbols[i]));\r\n        }\r\n    }\r\n    \r\n    // multiplication and division\r\n    newSymbols = performOperations(newSymbols, [TIMES, DIV]);\r\n    \r\n    // addition and subtraction\r\n    newSymbols = performOperations(newSymbols, [PLUS, MINUS]);\r\n    \r\n    // by this point there should only be one NUMBER left.\r\n    // TODO: confirm above via validation code\r\n    \r\n    if (newSymbols.length >= 1)\r\n    {\r\n        return newSymbols[0].getNumber();\r\n    }\r\n    else\r\n    {\r\n        return 0;\r\n    }\r\n}\r\n\r\nfunction rollAll(symbols, randomizer) {\r\n    // roll dice in sub-expressions\r\n    symbols = symbols.map(\r\n        symbol => Array.isArray(symbol) ? rollAll(symbol, randomizer) : symbol);\r\n\r\n    // roll dice\r\n    symbols = performOperations(symbols, [ROLL], randomizer);\r\n    symbols = performOperations(symbols, [LOWEST, HIGHEST]);\r\n    return symbols;\r\n}\r\n\r\n/**\r\n * Calculates the given formula expression.\r\n * \r\n * @param {string} expression\r\n *      The expression to parse and calculate.\r\n * @param {function} randomizer\r\n *      An optional function to produce a number\r\n *      between 0 (inclusive) and 1 (exclusive).\r\n *      Default is `Math.random`.\r\n */\r\nfunction calculate(expression, randomizer)\r\n{\r\n    const lowerExpression = expression.toLowerCase();\r\n    if (!validate(lowerExpression)) {\r\n        throw new Error(\"Formula is invalid.\");\r\n    }\r\n\r\n    let symbols = parseSymbols(lowerExpression);\r\n    symbols = rollAll(symbols, randomizer);\r\n    return {\r\n        symbols,\r\n        total: subCalculate(symbols)\r\n    };\r\n}\r\n\r\nexport default {\r\n    parseSymbols,\r\n    calculate\r\n};","import React from 'react';\r\nimport Formula from './Formula.js';\r\n\r\nexport default class Diceroll extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.maxResults = 50;\r\n        this.state = {\r\n            formula: null,\r\n            formulaIsInvalid: false,\r\n            results: [],\r\n            showHelp: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const error = this.state.formulaIsInvalid\r\n            ? (\r\n                <div class=\"alert alert-danger\" role=\"alert\">\r\n                    The formula is invalid.\r\n                </div>\r\n            )\r\n            : \"\";\r\n        const helpSection = this.state.showHelp\r\n            ? (\r\n                <div class=\"alert alert-info help\">\r\n                    <h2>Help</h2>\r\n                    <p>\r\n                        <small><em>Click the <strong>Help</strong> button again to dismiss this info box.</em></small>\r\n                    </p>\r\n                    <p>\r\n                        Any positive integer number can be entered as part of the formula.\r\n                        Numbers are joined together by operators.\r\n                        Operators include:\r\n                    </p>\r\n                    <ul>\r\n                        <li>\r\n                            <code>d</code>:\r\n                            Roll dice.\r\n                            First number is the quantity of dice.\r\n                            Second number is the number of sides per die.\r\n                        </li>\r\n                        <li>\r\n                            <code>*</code>: Multiply the two numbers.\r\n                        </li>\r\n                        <li>\r\n                            <code>/</code>: Divide the first number by the second number.\r\n                        </li>\r\n                        <li>\r\n                            <code>+</code>: Add the two numbers.\r\n                        </li>\r\n                        <li>\r\n                            <code>-</code>: Subtract the second number from the first number.\r\n                        </li>\r\n                    </ul>\r\n                    <p>\r\n                        Calculation honors traditional order of operations.\r\n                        Calculates dice rolls first,\r\n                        then expressions in parentheses,\r\n                        then multiplication and division,\r\n                        then addition and subtraction.\r\n                    </p>\r\n                    <p>\r\n                        Examples:\r\n                        <ul>\r\n                            <li><code>2d6</code>: Rolls 2 6-sided dice.</li>\r\n                            <li><code>1d20+5</code>: Rolls a 20-sided die and adds 5.</li>\r\n                            <li><code>(4d8+2)/3</code>: Rolls 4 8-sided dice and adds 2, then divides by 3.</li>\r\n                        </ul>\r\n                    </p>\r\n                    <p>\r\n                        Keep highest/lowest:\r\n                        <ul>\r\n                            <li><code>3h4d6</code>: Rolls 4 6-sided dice and only counts the 3 highest.</li>\r\n                            <li><code>1l2d20+3</code>: Rolls 2 20-sided dice, only counts the lowest, and adds 3.</li>\r\n                        </ul>\r\n                    </p>\r\n                    <div class=\"container-fluid\">\r\n                        <div class=\"d-flex justify-content-end\">\r\n                            <button class=\"btn btn-info\" type=\"button\"\r\n                                onClick={() => this.handleHelpClick()}>Close</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n            : \"\";\r\n        const helpButtonClass = \"btn btn-outline-secondary\" +\r\n            (this.state.showHelp ? \" active\" : \"\");\r\n        return (\r\n            <div class=\"container\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"rollFormula\">Formula</label>\r\n                    <div class=\"input-group\">\r\n                        <input type=\"text\" class=\"form-control\" id=\"rollFormula\"\r\n                            onKeyUp={(e) => this.handleFormulaKeyUp(e)}\r\n                            onChange={(e) => this.setState({formula: e.target.value})} />\r\n                        <div class=\"input-group-append\">\r\n                            <button class={helpButtonClass} type=\"button\"\r\n                                onClick={() => this.handleHelpClick()}>Help</button>\r\n                            <button class=\"btn btn-primary\" type=\"submit\"\r\n                                onClick={() => this.handleRollClick()}>Roll</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {error}\r\n                {helpSection}\r\n                <div class=\"history\">\r\n                    {this.renderHistory()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderHistory() {\r\n        const latestIndex = this.state.results.length - 1;\r\n        const th = this;\r\n        return this.state.results\r\n            .map(function(result, index) {\r\n                const latestClass = index === latestIndex ? \" latest\" : \"\";\r\n                const rowClass = \"row\" + latestClass;\r\n                const resultClass = \"result\" + latestClass;\r\n                return (\r\n                    <div class={rowClass}>\r\n                        <div class=\"col-md-9\">\r\n                            {th.renderSymbols(result.symbols)}\r\n                        </div>\r\n                        <div class=\"col-md-3\">\r\n                            <span class={resultClass}>{result.total}</span>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            })\r\n            .reverse();\r\n    }\r\n\r\n    renderSymbols(symbols) {\r\n        const th = this;\r\n        function getSymbolClass(sides, value) {\r\n            function classBySides(sides) {\r\n                switch(sides) {\r\n                    case 2: return \"coin\";\r\n                    case 4: return \"d4\";\r\n                    case 6: return \"d6\";\r\n                    case 8: return \"d8\";\r\n                    case 10: return \"d10\";\r\n                    case 12: return \"d12\";\r\n                    case 20: return \"d20\";\r\n                    default:\r\n                        return null;\r\n                }\r\n            }\r\n            const prefix = classBySides(sides);\r\n            return prefix\r\n                ? `${prefix} ${prefix}-${value}`\r\n                : \"coin\";\r\n        }\r\n        function renderSymbol(symbol) {\r\n            const discarded = symbol.discard ? \" discarded\" : \"\";\r\n            const dieClass = symbol.sides\r\n                ? \" die \" + getSymbolClass(symbol.sides, symbol.text)\r\n                : \"\"\r\n            const symbolClass = \"symbol\" + discarded + dieClass;\r\n            return <span class={symbolClass}>{symbol.text}</span>;\r\n        }\r\n        const leftParen = renderSymbol({text: \"(\"});\r\n        const rightParen = renderSymbol({text: \")\"});\r\n        return symbols.map(symbol => {\r\n            if (Array.isArray(symbol)) {\r\n                const renderParen = symbols.length > 1 &&\r\n                    (\r\n                        symbol.length > 1 ||\r\n                        Array.isArray(symbol[0])\r\n                    );\r\n                return <span>\r\n                    {renderParen ? leftParen : \"\"}\r\n                    {th.renderSymbols(symbol)}\r\n                    {renderParen ? rightParen : \"\"}\r\n                </span>;\r\n            }\r\n            // Skip plus operator from dice array. \r\n            if (symbols.some(x => x.sides) && symbol.text === \"+\") {\r\n                return \"\";\r\n            }\r\n            return renderSymbol(symbol);\r\n        });\r\n    }\r\n\r\n    handleFormulaKeyUp(event) {\r\n        if (event.keyCode === 13) {\r\n            this.handleRollClick();\r\n        }\r\n    }\r\n\r\n    handleHelpClick() {\r\n        this.setState({showHelp: !this.state.showHelp});\r\n    }\r\n    handleRollClick() {\r\n        try {\r\n            const result = Formula.calculate(this.state.formula);\r\n            this.addResult(result);\r\n        } catch {\r\n            this.setState({formulaIsInvalid: true});\r\n        }\r\n    }\r\n\r\n    addResult(result) {\r\n        let results = this.state.results;\r\n        results.push(result);\r\n        if (results.length > this.maxResults) {\r\n            results.splice(0, 1);\r\n        }\r\n        this.setState({\r\n            results: results,\r\n            formulaIsInvalid: false\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\nimport Diceroll from './Diceroll.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav class=\"navbar navbar-dark bg-dark\">\n        <a class=\"navbar-brand\" href=\".\">\n          <img src=\"image/icon.svg\" width=\"30\" height=\"30\" class=\"d-inline-block align-top\" alt=\"\" />\n          Diceroll\n        </a>\n      </nav>\n\n      <Diceroll />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}