{"version":3,"sources":["Formula.js","Diceroll.js","App.js","serviceWorker.js","index.js"],"names":["Symbol","type","text","this","parseFloat","DieSymbol","sides","value","toString","NumberSymbol","parseSymbols","expression","symbols","parenCount","i","length","lastSymbol","push","rollOne","Math","floor","random","operation","number1","symbol","number2","count","rollIntoSymbols","sum","roll","performOperations","ops","newSymbols","includes","newSymbol","getNumber","pop","subCalculate","slice","Array","isArray","calculate","pattern","RegExp","match","isMatch","countLeft","countRight","validate","Error","rollAll","map","total","Diceroll","props","maxResults","state","formula","formulaIsInvalid","results","showHelp","error","class","role","helpSection","helpButtonClass","for","id","onKeyUp","e","handleFormulaKeyUp","onChange","setState","target","onClick","handleHelpClick","handleRollClick","renderHistory","latestIndex","th","result","index","latestClass","rowClass","resultClass","renderSymbols","reverse","renderSymbol","symbolClass","prefix","classBySides","getSymbolClass","leftParen","rightParen","renderParen","some","x","event","keyCode","Formula","addResult","splice","React","Component","App","className","href","src","width","height","alt","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.beda3329.chunk.js","sourcesContent":["const PLUS = '+';\r\nconst MINUS = '-';\r\nconst TIMES = '*';\r\nconst DIV = '/';\r\nconst ROLL = 'd';\r\n\r\n// symbol types\r\nconst NUMBER = 0;\r\nconst OPERATOR = 1;\r\nconst COMPOUND = 2;\r\n\r\nclass Symbol {\r\n    constructor(type, text) {\r\n        this.type = type;\r\n        this.text = text;\r\n    }\r\n\r\n    getNumber() {\r\n         return this.type !== NUMBER ? 0 : parseFloat(this.text);\r\n    }\r\n}\r\n\r\nclass DieSymbol extends Symbol {\r\n    constructor(sides, value) {\r\n        super(NUMBER, value.toString());\r\n        this.sides = sides;\r\n    }\r\n}\r\n\r\nfunction NumberSymbol(value) {\r\n    return new Symbol(NUMBER, value.toString());\r\n}\r\n\r\nfunction parseSymbols(expression) {\r\n    let symbols = [];\r\n    let parenCount = 0;\r\n    for (let i = 0; i < expression.length; i++) {\r\n        let lastSymbol = symbols.length > 0\r\n            ? symbols[symbols.length - 1]\r\n            : null;\r\n        if (parenCount > 0)\r\n        {\r\n            // within any number of parentheses\r\n            // all characters are treated\r\n            // as part of the same expression\r\n            if (expression[i] === ')')\r\n            {\r\n                parenCount--;\r\n            }\r\n            else if (expression[i] === '(')\r\n            {\r\n                parenCount++;\r\n            }\r\n            \r\n            if (parenCount > 0)\r\n            {\r\n                symbols[symbols.length - 1].text += expression[i];\r\n            }\r\n        }\r\n        else if (expression[i] === PLUS ||\r\n            expression[i] === MINUS ||\r\n            expression[i] === TIMES ||\r\n            expression[i] === DIV ||\r\n            expression[i] === ROLL) {\r\n            symbols.push(new Symbol(OPERATOR, expression[i]));\r\n        }\r\n        else if (expression[i] >= '0' && expression[i] <= '9') {\r\n            if (!lastSymbol || lastSymbol.type !== NUMBER) {\r\n                symbols.push(new Symbol(NUMBER, expression[i]));\r\n            }\r\n            else {\r\n                lastSymbol.text += expression[i];\r\n            }\r\n        }\r\n        else if (expression[i] === '(')\r\n        {\r\n            parenCount++;\r\n            symbols.push(new Symbol(COMPOUND, ''));\r\n        }\r\n    }\r\n\r\n    // convert COMPOUND symbols to sub-arrays.\r\n    for (let i = 0; i < symbols.length; i++) {\r\n        if (symbols[i].type === COMPOUND) {\r\n            symbols[i] = parseSymbols(symbols[i].text);\r\n        }\r\n    }\r\n    \r\n    return symbols;\r\n}\r\n\r\nfunction rollOne(sides) {\r\n    return Math.floor(Math.random() * (sides)) + 1;\r\n}\r\n\r\nfunction roll(count, sides)\r\n{\r\n    let sum = 0;\r\n    for (let i = 0; i < count; i++)\r\n    {\r\n        sum += rollOne(sides);\r\n    }\r\n    return sum;\r\n}\r\n\r\nfunction rollIntoSymbols(count, sides) {\r\n    let symbols = [];\r\n    for (let i = 0; i < count; i++) {\r\n        if (symbols.length > 0) {\r\n            symbols.push(new Symbol(OPERATOR, PLUS));\r\n        }\r\n        symbols.push(new DieSymbol(sides, rollOne(sides)));\r\n    }\r\n    return symbols;\r\n}\r\n    \r\nfunction operation(number1, symbol, number2)\r\n{\r\n    if (symbol === ROLL) {\r\n        return rollIntoSymbols(number1, number2);\r\n    }\r\n\r\n    return NumberSymbol((function () {\r\n        switch (symbol)\r\n        {\r\n            case PLUS:\r\n                return number1 + number2;\r\n            case MINUS:\r\n                return number1 - number2;\r\n            case TIMES:\r\n                return number1 * number2;\r\n            case DIV:\r\n                return number1 / number2;\r\n            case ROLL:\r\n                return roll(number1, number2);\r\n            default:\r\n                return number1;\r\n        }\r\n    })());\r\n}\r\n\r\nfunction performOperations(symbols, ops)\r\n{\r\n    let newSymbols = [];\r\n    for (let i = 0; i < symbols.length; i++)\r\n    {\r\n        let symbol = symbols[i];\r\n        // if the current symbol is an operator\r\n        // and is one of the current operations declared by ops,\r\n        // perform that operation now.\r\n        if (symbol.type && symbol.type === OPERATOR && ops.includes(symbol.text))\r\n        {\r\n            // effectively convert NUMBER OPERATOR NUMBER to NUMBER\r\n            \r\n            // assumes that i is not first or last in the array\r\n            // and that before and after are both numbers.\r\n            const number1 = newSymbols[newSymbols.length-1].getNumber();\r\n            const operator = symbol.text[0];\r\n            const number2 = symbols[i+1].getNumber();\r\n            let newSymbol = operation(number1, operator, number2);\r\n            newSymbols.pop();\r\n            newSymbols.push(newSymbol);\r\n            i++;\r\n        } else {\r\n            newSymbols.push(symbol);\r\n        }\r\n    }\r\n\r\n    return newSymbols;\r\n}\r\n\r\nfunction validate(expression) {\r\n    function count(symbol) {\r\n        const pattern = new RegExp('\\\\'+symbol, \"g\");\r\n        return (expression.match(pattern) || []).length;\r\n    }\r\n    const regex = /^\\(*\\d+(\\)*[d+\\-*/]\\(*\\d+)*\\)*$/;\r\n    const isMatch = !!expression.match(regex);\r\n    const countLeft = count('(');\r\n    const countRight = count(')');\r\n    return isMatch && countLeft === countRight;\r\n}\r\n\r\nfunction subCalculate(symbols) {\r\n    // order of operations is P-R-MD-AS\r\n    // where R = roll dice\r\n\r\n    // find parentheses first\r\n    let newSymbols = symbols.slice();\r\n    for (let i = 0; i < newSymbols.length; i++) {\r\n\r\n        if (Array.isArray(newSymbols[i]))\r\n        {\r\n            // convert COMPOUND to NUMBER via recursion\r\n            newSymbols[i] = NumberSymbol(subCalculate(newSymbols[i]));\r\n        }\r\n    }\r\n\r\n    // roll dice\r\n    newSymbols = performOperations(newSymbols, [ROLL]);\r\n    \r\n    // multiplication and division\r\n    newSymbols = performOperations(newSymbols, [TIMES, DIV]);\r\n    \r\n    // addition and subtraction\r\n    newSymbols = performOperations(newSymbols, [PLUS, MINUS]);\r\n    \r\n    // by this point there should only be one NUMBER left.\r\n    // TODO: confirm above via validation code\r\n    \r\n    if (newSymbols.length >= 1)\r\n    {\r\n        return newSymbols[0].getNumber();\r\n    }\r\n    else\r\n    {\r\n        return 0;\r\n    }\r\n}\r\n\r\nfunction rollAll(symbols) {\r\n    // roll dice in sub-expressions\r\n    symbols = symbols.map(\r\n        symbol => Array.isArray(symbol) ? rollAll(symbol) : symbol);\r\n\r\n    // roll dice\r\n    symbols = performOperations(symbols, [ROLL]);\r\n    return symbols;\r\n}\r\n\r\nfunction calculate(expression)\r\n{\r\n    if (!validate(expression)) {\r\n        throw new Error(\"Formula is invalid.\");\r\n    }\r\n\r\n    let symbols = parseSymbols(expression);\r\n    symbols = rollAll(symbols);\r\n    return {\r\n        symbols,\r\n        total: subCalculate(symbols)\r\n    };\r\n}\r\n\r\nexport default {\r\n    parseSymbols,\r\n    calculate\r\n};","import React from 'react';\nimport Formula from './Formula.js';\n\nexport default class Diceroll extends React.Component {\n    constructor(props) {\n        super(props);\n        this.maxResults = 5;\n        this.state = {\n            formula: null,\n            formulaIsInvalid: false,\n            results: [],\n            showHelp: false\n        };\n    }\n\n    render() {\n        const error = this.state.formulaIsInvalid\n            ? (\n                <div class=\"alert alert-danger\" role=\"alert\">\n                    The formula is invalid.\n                </div>\n            )\n            : \"\";\n        const helpSection = this.state.showHelp\n            ? (\n                <div class=\"alert alert-info help\">\n                    <h2>Help</h2>\n                    <p>\n                        <em>Click the <strong>Help</strong> button again to dismiss this info box.</em>\n                    </p>\n                    <p>\n                        Any positive integer number can be entered as part of the formula.\n                        Numbers are joined together by operators.\n                        Operators include:\n                    </p>\n                    <ul>\n                        <li>\n                            <code>d</code>:\n                            Roll dice.\n                            First number is the quantity of dice.\n                            Second number is the number of sides per die.\n                        </li>\n                        <li>\n                            <code>*</code>: Multiply the two numbers.\n                        </li>\n                        <li>\n                            <code>/</code>: Divide the first number by the second number.\n                        </li>\n                        <li>\n                            <code>+</code>: Add the two numbers.\n                        </li>\n                        <li>\n                            <code>-</code>: Subtract the second number from the first number.\n                        </li>\n                    </ul>\n                    <p>\n                        Calculation honors traditional order of operations.\n                        Calculates dice rolls first,\n                        then expressions in parentheses,\n                        then multiplication and division,\n                        then addition and subtraction.\n                    </p>\n                    <p>\n                        Examples:\n                        <ul>\n                            <li><code>2d6</code>: Rolls 2 6-sided dice.</li>\n                            <li><code>1d20+5</code>: Rolls a 20-sided die and adds 5.</li>\n                            <li><code>(4d8+2)/3</code>: Rolls 4 8-sided dice and adds 2, then divides by 3.</li>\n                        </ul>\n                    </p>\n                </div>\n\n            )\n            : \"\";\n        const helpButtonClass = \"btn btn-outline-secondary\" +\n            (this.state.showHelp ? \" active\" : \"\");\n        return (\n            <div class=\"container\">\n                <div class=\"form-group\">\n                    <label for=\"rollFormula\">Formula</label>\n                    <div class=\"input-group\">\n                        <input type=\"text\" class=\"form-control\" id=\"rollFormula\"\n                            onKeyUp={(e) => this.handleFormulaKeyUp(e)}\n                            onChange={(e) => this.setState({formula: e.target.value})} />\n                        <div class=\"input-group-append\">\n                            <button class={helpButtonClass} type=\"button\"\n                                onClick={() => this.handleHelpClick()}>Help</button>\n                            <button class=\"btn btn-primary\" type=\"submit\"\n                                onClick={() => this.handleRollClick()}>Roll</button>\n                        </div>\n                    </div>\n                </div>\n                {error}\n                {helpSection}\n                <div class=\"history\">\n                    {this.renderHistory()}\n                </div>\n            </div>\n        );\n    }\n\n    renderHistory() {\n        const latestIndex = this.state.results.length - 1;\n        const th = this;\n        return this.state.results\n            .map(function(result, index) {\n                const latestClass = index === latestIndex ? \" latest\" : \"\";\n                const rowClass = \"row\" + latestClass;\n                const resultClass = \"result\" + latestClass;\n                return (\n                    <div class={rowClass}>\n                        <div class=\"col-md-9\">\n                            {th.renderSymbols(result.symbols)}\n                        </div>\n                        <div class=\"col-md-3\">\n                            <span class={resultClass}>{result.total}</span>\n                        </div>\n                    </div>\n                );\n            })\n            .reverse();\n    }\n\n    renderSymbols(symbols) {\n        const th = this;\n        function getSymbolClass(sides, value) {\n            function classBySides(sides) {\n                switch(sides) {\n                    case 2: return \"coin\";\n                    case 4: return \"d4\";\n                    case 6: return \"d6\";\n                    case 8: return \"d8\";\n                    case 10: return \"d10\";\n                    case 12: return \"d12\";\n                    case 20: return \"d20\";\n                    default:\n                        return null;\n                }\n            }\n            const prefix = classBySides(sides);\n            return prefix\n                ? `${prefix} ${prefix}-${value}`\n                : \"coin\";\n        }\n        function renderSymbol(symbol) {\n            const symbolClass = \"symbol\" + (symbol.sides\n                ? \" die \" + getSymbolClass(symbol.sides, symbol.text)\n                : \"\");\n            return <span class={symbolClass}>{symbol.text}</span>;\n        }\n        const leftParen = renderSymbol({text: \"(\"});\n        const rightParen = renderSymbol({text: \")\"});\n        return symbols.map(symbol => {\n            if (Array.isArray(symbol)) {\n                const renderParen = symbols.length > 1 &&\n                    (\n                        symbol.length > 1 ||\n                        Array.isArray(symbol[0])\n                    );\n                return <span>\n                    {renderParen ? leftParen : \"\"}\n                    {th.renderSymbols(symbol)}\n                    {renderParen ? rightParen : \"\"}\n                </span>;\n            }\n            // Skip plus operator from dice array. \n            if (symbols.some(x => x.sides) && symbol.text === \"+\") {\n                return \"\";\n            }\n            return renderSymbol(symbol);\n        });\n    }\n\n    handleFormulaKeyUp(event) {\n        if (event.keyCode === 13) {\n            this.handleRollClick();\n        }\n    }\n\n    handleHelpClick() {\n        this.setState({showHelp: !this.state.showHelp});\n    }\n    handleRollClick() {\n        try {\n            const result = Formula.calculate(this.state.formula);\n            this.addResult(result);\n        } catch {\n            this.setState({formulaIsInvalid: true});\n        }\n    }\n\n    addResult(result) {\n        let results = this.state.results;\n        results.push(result);\n        if (results.length > this.maxResults) {\n            results.splice(0, 1);\n        }\n        this.setState({\n            results: results,\n            formulaIsInvalid: false\n        });\n    }\n}\n","import React from 'react';\nimport Diceroll from './Diceroll.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav class=\"navbar navbar-dark bg-dark\">\n        <a class=\"navbar-brand\" href=\".\">\n          <img src=\"/image/icon.svg\" width=\"30\" height=\"30\" class=\"d-inline-block align-top\" alt=\"\" />\n          Diceroll\n        </a>\n      </nav>\n\n      <Diceroll />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}