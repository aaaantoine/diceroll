{"version":3,"sources":["Formula.js","Diceroll.js","App.js","serviceWorker.js","index.js"],"names":["ROLL","LOWEST","HIGHEST","Symbol","type","text","this","discard","parseFloat","DieSymbol","sides","value","toString","NumberSymbol","parseSymbols","expression","startPosition","pos","i","parserError","message","Error","isNumberPart","character","symbols","parenCount","lastSymbol","length","sideError","side","isRollRelated","includes","isValidBeforeOperator","push","slice","some","x","_pos","rollOne","randomizer","r","Math","random","floor","operation","number1","symbol","number2","count","rollIntoSymbols","keepCount","keepLowestOrHighest","dice","handleNoDice","Array","isArray","workdice","filter","d","undefined","forEach","die","compFunc","a","b","getNumber","sort","markDiscarded","performOperations","ops","newSymbols","operator","next","newSymbol","pop","subCalculate","calculate","lowerExpression","toLowerCase","pattern","RegExp","match","countLeft","countRight","testParentheses","rollAll","map","total","Diceroll","props","maxResults","state","formula","formulaError","results","showHelp","error","class","role","helpSection","onClick","handleHelpClick","helpButtonClass","for","id","onKeyUp","e","handleFormulaKeyUp","onChange","setState","target","handleRollClick","renderHistory","latestIndex","th","result","index","latestClass","rowClass","resultClass","renderSymbols","reverse","renderSymbol","symbolClass","prefix","classBySides","getSymbolClass","leftParen","rightParen","renderParen","event","keyCode","Formula","addResult","ex","splice","React","Component","App","className","href","src","width","height","alt","rel","aria-label","xmlns","viewBox","focusable","fill","fill-rule","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2cd8f07b.chunk.js","sourcesContent":["const PLUS = '+';\r\nconst MINUS = '-';\r\nconst TIMES = '*';\r\nconst DIV = '/';\r\nconst ROLL = 'd';\r\nconst LOWEST = 'l';\r\nconst HIGHEST = 'h';\r\n\r\n// symbol types\r\nconst NUMBER = 0;\r\nconst OPERATOR = 1;\r\nconst COMPOUND = 2;\r\n\r\nclass Symbol {\r\n    constructor(type, text) {\r\n        this.type = type;\r\n        this.text = text;\r\n    }\r\n\r\n    getNumber() {\r\n        return this.type !== NUMBER || !!this.discard\r\n            ? 0 \r\n            : parseFloat(this.text);\r\n    }\r\n}\r\n\r\nclass DieSymbol extends Symbol {\r\n    constructor(sides, value) {\r\n        super(NUMBER, value.toString());\r\n        this.sides = sides;\r\n        this.discard = false;\r\n    }\r\n}\r\n\r\nfunction NumberSymbol(value) {\r\n    return new Symbol(NUMBER, value.toString());\r\n}\r\n\r\nfunction parseSymbols(expression, startPosition) {\r\n    startPosition = startPosition || 0;\r\n    function pos(i) {\r\n        return startPosition + i;\r\n    }\r\n    function parserError(i, message) {\r\n        return new Error(`At position ${pos(i)}: ${message}`);\r\n    }\r\n    function isOperator(character) {\r\n        return character === PLUS ||\r\n            character === MINUS ||\r\n            character === TIMES ||\r\n            character === DIV ||\r\n            character === ROLL ||\r\n            character === LOWEST ||\r\n            character === HIGHEST;\r\n    }\r\n    function isNumberPart(character) {\r\n        return character >= '0' && character <= '9';\r\n    }\r\n    function isValidBeforeOperator(character) {\r\n        return character === \")\" || isNumberPart(character);\r\n    }\r\n    let symbols = [];\r\n    let parenCount = 0;\r\n    for (let i = 0; i < expression.length; i++) {\r\n        let lastSymbol = symbols.length > 0\r\n            ? symbols[symbols.length - 1]\r\n            : null;\r\n        if (parenCount > 0)\r\n        {\r\n            // within any number of parentheses\r\n            // all characters are treated\r\n            // as part of the same expression\r\n            if (expression[i] === ')')\r\n            {\r\n                parenCount--;\r\n            }\r\n            else if (expression[i] === '(')\r\n            {\r\n                parenCount++;\r\n            }\r\n            \r\n            if (parenCount > 0)\r\n            {\r\n                symbols[symbols.length - 1].text += expression[i];\r\n            }\r\n        }\r\n        else if (isOperator(expression[i])) {\r\n            const isRollRelated =\r\n                [HIGHEST, LOWEST, ROLL].includes(expression[i]);\r\n            function sideError(side) {\r\n                return parserError(i, `Operator \"${expression[i]}\" is missing a ${side} value.`);\r\n            }\r\n            if (i === 0 || !isValidBeforeOperator(expression[i-1])) {\r\n                if (isRollRelated) {\r\n                    // Assume e.g. d10 == 1d10 and h2d20 == 1h2d20\r\n                    symbols.push(NumberSymbol(1));\r\n                } else {\r\n                    throw sideError(\"left-hand\");\r\n                }\r\n            }\r\n            if (i > 0 && isRollRelated) {\r\n                const predecessorIsRoll = symbols.length >= 2 &&\r\n                    symbols\r\n                        .slice(symbols.length - 2, symbols.length)\r\n                        .some(x => x.text === ROLL);\r\n                if (predecessorIsRoll) {\r\n                    throw parserError(i, `Invalid placement of operator \"${expression[i]}\".`);\r\n                }\r\n                const predecessorIsCompound = symbols.length >= 1 &&\r\n                    symbols[symbols.length -1].type === COMPOUND;\r\n                if (predecessorIsCompound) {\r\n                    throw parserError(i, \"Calculating number of dice in a pool is not supported.\");\r\n                }\r\n            }\r\n            if (i === expression.length - 1) {\r\n                throw sideError(\"right-hand\");\r\n            }\r\n            symbols.push(new Symbol(OPERATOR, expression[i]));\r\n        }\r\n        else if (isNumberPart(expression[i])) {\r\n            if (!lastSymbol || lastSymbol.type !== NUMBER) {\r\n                symbols.push(new Symbol(NUMBER, expression[i]));\r\n            }\r\n            else {\r\n                lastSymbol.text += expression[i];\r\n            }\r\n        }\r\n        else if (expression[i] === '(')\r\n        {\r\n            if (i > 0) {\r\n                if (isNumberPart(expression[i-1])) {\r\n                    // If number precedes opening paren, treat as multiplier.\r\n                    symbols.push(new Symbol(OPERATOR, TIMES));\r\n                } else if (expression[i-1] === ROLL) {\r\n                    throw parserError(i, \"Calculating number of sides per die is not supported.\");\r\n                }\r\n            }\r\n\r\n            parenCount++;\r\n            symbols.push(new Symbol(COMPOUND, ''));\r\n            symbols[symbols.length-1]._pos = pos(i) + 1;\r\n        }\r\n        else {\r\n            throw parserError(i, `Unrecognized character \"${expression[i]}\".`);\r\n        }\r\n    }\r\n\r\n    // convert COMPOUND symbols to sub-arrays.\r\n    for (let i = 0; i < symbols.length; i++) {\r\n        if (symbols[i].type === COMPOUND) {\r\n            symbols[i] = parseSymbols(symbols[i].text, symbols[i]._pos);\r\n        }\r\n    }\r\n    \r\n    return symbols;\r\n}\r\n\r\nfunction rollOne(sides, randomizer) {\r\n    const r = randomizer || Math.random;\r\n    return Math.floor(r() * (sides)) + 1;\r\n}\r\n\r\nfunction rollIntoSymbols(count, sides, randomizer) {\r\n    let symbols = [];\r\n    for (let i = 0; i < count; i++) {\r\n        if (symbols.length > 0) {\r\n            symbols.push(new Symbol(OPERATOR, PLUS));\r\n        }\r\n        symbols.push(new DieSymbol(sides, rollOne(sides, randomizer)));\r\n    }\r\n    return symbols;\r\n}\r\n\r\nfunction markDiscarded(keepCount, keepLowestOrHighest, dice) {\r\n    function handleNoDice() {\r\n        throw new Error(\"Can only keep highest/lowest against a dice pool.\");\r\n    }\r\n    if (!Array.isArray(dice)) {\r\n        handleNoDice();\r\n    }\r\n    let workdice = dice.filter(d => d.sides !== undefined);\r\n    if (workdice.length === 0) {\r\n        handleNoDice();\r\n    }\r\n    workdice.forEach(die => die.discard = false);\r\n    const compFunc = keepLowestOrHighest === LOWEST\r\n        ? (a, b) => a.getNumber() - b.getNumber()\r\n        : (a, b) => b.getNumber() - a.getNumber();\r\n    workdice\r\n        .sort(compFunc)\r\n        .slice(keepCount)\r\n        .forEach(die => die.discard = true);\r\n    \r\n    return dice;\r\n}\r\n    \r\nfunction operation(number1, symbol, number2, randomizer) {\r\n    if (symbol === ROLL) {\r\n        return rollIntoSymbols(number1, number2, randomizer);\r\n    }\r\n    if ([LOWEST, HIGHEST].includes(symbol)) {\r\n        return markDiscarded(number1, symbol, number2);\r\n    }\r\n\r\n    return NumberSymbol((function () {\r\n        switch (symbol)\r\n        {\r\n            case PLUS:\r\n                return number1 + number2;\r\n            case MINUS:\r\n                return number1 - number2;\r\n            case TIMES:\r\n                return number1 * number2;\r\n            case DIV:\r\n                return number1 / number2;\r\n            default:\r\n                return number1;\r\n        }\r\n    })());\r\n}\r\n\r\nfunction performOperations(symbols, ops, randomizer)\r\n{\r\n    let newSymbols = [];\r\n    for (let i = 0; i < symbols.length; i++)\r\n    {\r\n        let symbol = symbols[i];\r\n        // if the current symbol is an operator\r\n        // and is one of the current operations declared by ops,\r\n        // perform that operation now.\r\n        if (symbol.type && symbol.type === OPERATOR && ops.includes(symbol.text))\r\n        {\r\n            // effectively convert NUMBER OPERATOR NUMBER to NUMBER\r\n            \r\n            // assumes that i is not first or last in the array\r\n            // and that before and after are both numbers.\r\n            const number1 = newSymbols[newSymbols.length-1].getNumber();\r\n            const operator = symbol.text[0];\r\n            const next = symbols[i+1];\r\n            const number2 = Array.isArray(next) ? next : next.getNumber();\r\n            let newSymbol = operation(number1, operator, number2, randomizer);\r\n            newSymbols.pop();\r\n            newSymbols.push(newSymbol);\r\n            i++;\r\n        } else {\r\n            newSymbols.push(symbol);\r\n        }\r\n    }\r\n\r\n    return newSymbols;\r\n}\r\n\r\nfunction testParentheses(expression) {\r\n    function count(symbol) {\r\n        const pattern = new RegExp('\\\\'+symbol, \"g\");\r\n        return (expression.match(pattern) || []).length;\r\n    }\r\n    const countLeft = count('(');\r\n    const countRight = count(')');\r\n    if (countLeft !== countRight) {\r\n        throw new Error(`Parentheses mismatch. Counted ${countLeft} opening and ${countRight} closing.`);\r\n    }\r\n}\r\n\r\nfunction subCalculate(symbols) {\r\n    // order of operations is R-P-MD-AS\r\n    // where R = roll dice\r\n    // Dice should already be rolled and processed into symbols.\r\n\r\n    // find parentheses first\r\n    let newSymbols = symbols.slice();\r\n    for (let i = 0; i < newSymbols.length; i++) {\r\n\r\n        if (Array.isArray(newSymbols[i]))\r\n        {\r\n            // convert COMPOUND to NUMBER via recursion\r\n            newSymbols[i] = NumberSymbol(subCalculate(newSymbols[i]));\r\n        }\r\n    }\r\n    \r\n    // multiplication and division\r\n    newSymbols = performOperations(newSymbols, [TIMES, DIV]);\r\n    \r\n    // addition and subtraction\r\n    newSymbols = performOperations(newSymbols, [PLUS, MINUS]);\r\n    \r\n    // by this point there should only be one NUMBER left.\r\n    // TODO: confirm above via validation code\r\n    \r\n    if (newSymbols.length >= 1)\r\n    {\r\n        return newSymbols[0].getNumber();\r\n    }\r\n    else\r\n    {\r\n        return 0;\r\n    }\r\n}\r\n\r\nfunction rollAll(symbols, randomizer) {\r\n    // roll dice in sub-expressions\r\n    symbols = symbols.map(\r\n        symbol => Array.isArray(symbol) ? rollAll(symbol, randomizer) : symbol);\r\n\r\n    // roll dice\r\n    symbols = performOperations(symbols, [ROLL], randomizer);\r\n    symbols = performOperations(symbols, [LOWEST, HIGHEST]);\r\n    return symbols;\r\n}\r\n\r\n/**\r\n * Calculates the given formula expression.\r\n * \r\n * @param {string} expression\r\n *      The expression to parse and calculate.\r\n * @param {function} randomizer\r\n *      An optional function to produce a number\r\n *      between 0 (inclusive) and 1 (exclusive).\r\n *      Default is `Math.random`.\r\n */\r\nfunction calculate(expression, randomizer)\r\n{\r\n    const lowerExpression = expression.toLowerCase();\r\n    testParentheses(lowerExpression);\r\n\r\n    let symbols = parseSymbols(lowerExpression);\r\n    symbols = rollAll(symbols, randomizer);\r\n    return {\r\n        symbols,\r\n        total: subCalculate(symbols)\r\n    };\r\n}\r\n\r\nexport default {\r\n    parseSymbols,\r\n    calculate\r\n};","import React from 'react';\r\nimport Formula from './Formula.js';\r\n\r\nexport default class Diceroll extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.maxResults = 50;\r\n        this.state = {\r\n            formula: null,\r\n            formulaError: null,\r\n            results: [],\r\n            showHelp: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const error = this.state.formulaError\r\n            ? (\r\n                <div class=\"alert alert-danger\" role=\"alert\">\r\n                    {this.state.formulaError.message}\r\n                </div>\r\n            )\r\n            : \"\";\r\n        const helpSection = this.state.showHelp\r\n            ? (\r\n                <div class=\"alert alert-info help\">\r\n                    <h2>Help</h2>\r\n                    <p>\r\n                        <small><em>Click the <strong>Help</strong> button again to dismiss this info box.</em></small>\r\n                    </p>\r\n                    <p>\r\n                        Any positive integer number can be entered as part of the formula.\r\n                        Numbers are joined together by operators.\r\n                        Operators include:\r\n                    </p>\r\n                    <ul>\r\n                        <li>\r\n                            <code>d</code>:\r\n                            Roll dice.\r\n                            First number is the quantity of dice.\r\n                            Second number is the number of sides per die.\r\n                        </li>\r\n                        <li>\r\n                            <code>*</code>: Multiply the two numbers.\r\n                        </li>\r\n                        <li>\r\n                            <code>/</code>: Divide the first number by the second number.\r\n                        </li>\r\n                        <li>\r\n                            <code>+</code>: Add the two numbers.\r\n                        </li>\r\n                        <li>\r\n                            <code>-</code>: Subtract the second number from the first number.\r\n                        </li>\r\n                    </ul>\r\n                    <p>\r\n                        Calculation honors traditional order of operations.\r\n                        Calculates dice rolls first,\r\n                        then expressions in parentheses,\r\n                        then multiplication and division,\r\n                        then addition and subtraction.\r\n                    </p>\r\n                    <p>\r\n                        Examples:\r\n                        <ul>\r\n                            <li><code>2d6</code>: Rolls 2 6-sided dice.</li>\r\n                            <li><code>1d20+5</code>: Rolls a 20-sided die and adds 5.</li>\r\n                            <li><code>(4d8+2)/3</code>: Rolls 4 8-sided dice and adds 2, then divides by 3.</li>\r\n                        </ul>\r\n                    </p>\r\n                    <p>\r\n                        Keep highest/lowest:\r\n                        <ul>\r\n                            <li><code>3h4d6</code>: Rolls 4 6-sided dice and only counts the 3 highest.</li>\r\n                            <li><code>1l2d20+3</code>: Rolls 2 20-sided dice, only counts the lowest, and adds 3.</li>\r\n                        </ul>\r\n                    </p>\r\n                    <div class=\"container-fluid\">\r\n                        <div class=\"d-flex justify-content-end\">\r\n                            <button class=\"btn btn-info\" type=\"button\"\r\n                                onClick={() => this.handleHelpClick()}>Close</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n            : \"\";\r\n        const helpButtonClass = \"btn btn-outline-secondary\" +\r\n            (this.state.showHelp ? \" active\" : \"\");\r\n        return (\r\n            <div class=\"container\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"rollFormula\">Formula</label>\r\n                    <div class=\"input-group\">\r\n                        <input type=\"text\" class=\"form-control\" id=\"rollFormula\"\r\n                            onKeyUp={(e) => this.handleFormulaKeyUp(e)}\r\n                            onChange={(e) => this.setState({formula: e.target.value})} />\r\n                        <div class=\"input-group-append\">\r\n                            <button class={helpButtonClass} type=\"button\"\r\n                                onClick={() => this.handleHelpClick()}>Help</button>\r\n                            <button class=\"btn btn-primary\" type=\"submit\"\r\n                                onClick={() => this.handleRollClick()}>Roll</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {error}\r\n                {helpSection}\r\n                <div class=\"history\">\r\n                    {this.renderHistory()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderHistory() {\r\n        const latestIndex = this.state.results.length - 1;\r\n        const th = this;\r\n        return this.state.results\r\n            .map(function(result, index) {\r\n                const latestClass = index === latestIndex ? \" latest\" : \"\";\r\n                const rowClass = \"row\" + latestClass;\r\n                const resultClass = \"result\" + latestClass;\r\n                return (\r\n                    <div class={rowClass}>\r\n                        <div class=\"col-md-9\">\r\n                            {th.renderSymbols(result.symbols)}\r\n                        </div>\r\n                        <div class=\"col-md-3\">\r\n                            <span class={resultClass}>{result.total}</span>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            })\r\n            .reverse();\r\n    }\r\n\r\n    renderSymbols(symbols) {\r\n        const th = this;\r\n        function getSymbolClass(sides, value) {\r\n            function classBySides(sides) {\r\n                switch(sides) {\r\n                    case 2: return \"coin\";\r\n                    case 4: return \"d4\";\r\n                    case 6: return \"d6\";\r\n                    case 8: return \"d8\";\r\n                    case 10: return \"d10\";\r\n                    case 12: return \"d12\";\r\n                    case 20: return \"d20\";\r\n                    default:\r\n                        return null;\r\n                }\r\n            }\r\n            const prefix = classBySides(sides);\r\n            return prefix\r\n                ? `${prefix} ${prefix}-${value}`\r\n                : \"coin\";\r\n        }\r\n        function renderSymbol(symbol) {\r\n            const discarded = symbol.discard ? \" discarded\" : \"\";\r\n            const dieClass = symbol.sides\r\n                ? \" die \" + getSymbolClass(symbol.sides, symbol.text)\r\n                : \"\"\r\n            const symbolClass = \"symbol\" + discarded + dieClass;\r\n            return <span class={symbolClass}>{symbol.text}</span>;\r\n        }\r\n        const leftParen = renderSymbol({text: \"(\"});\r\n        const rightParen = renderSymbol({text: \")\"});\r\n        return symbols.map(symbol => {\r\n            if (Array.isArray(symbol)) {\r\n                const renderParen = symbols.length > 1 &&\r\n                    (\r\n                        symbol.length > 1 ||\r\n                        Array.isArray(symbol[0])\r\n                    );\r\n                return <span>\r\n                    {renderParen ? leftParen : \"\"}\r\n                    {th.renderSymbols(symbol)}\r\n                    {renderParen ? rightParen : \"\"}\r\n                </span>;\r\n            }\r\n            // Skip plus operator from dice array. \r\n            if (symbols.some(x => x.sides) && symbol.text === \"+\") {\r\n                return \"\";\r\n            }\r\n            return renderSymbol(symbol);\r\n        });\r\n    }\r\n\r\n    handleFormulaKeyUp(event) {\r\n        if (event.keyCode === 13) {\r\n            this.handleRollClick();\r\n        }\r\n    }\r\n\r\n    handleHelpClick() {\r\n        this.setState({showHelp: !this.state.showHelp});\r\n    }\r\n    handleRollClick() {\r\n        try {\r\n            const result = Formula.calculate(this.state.formula);\r\n            this.addResult(result);\r\n        } catch(ex) {\r\n            this.setState({formulaError: ex});\r\n        }\r\n    }\r\n\r\n    addResult(result) {\r\n        let results = this.state.results;\r\n        results.push(result);\r\n        if (results.length > this.maxResults) {\r\n            results.splice(0, 1);\r\n        }\r\n        this.setState({\r\n            results: results,\r\n            formulaError: null\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Diceroll from './Diceroll.js';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <nav class=\"navbar navbar-dark bg-dark\">\r\n        <a class=\"navbar-brand\" href=\".\">\r\n          <img src=\"image/icon.svg\" width=\"30\" height=\"30\" class=\"d-inline-block align-top\" alt=\"\" />\r\n          Diceroll\r\n        </a>\r\n\r\n        <a class=\"nav-link p-2\" href=\"https://github.com/aaaantoine/diceroll\" target=\"_blank\" rel=\"noopener noreferrer\" aria-label=\"GitHub\">\r\n          <svg class=\"navbar-nav-svg\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 499.36\" focusable=\"false\">\r\n            <title>GitHub</title>\r\n            <path d=\"M256 0C114.64 0 0 114.61 0 256c0 113.09 73.34 209 175.08 242.9 12.8 2.35 17.47-5.56 17.47-12.34 0-6.08-.22-22.18-.35-43.54-71.2 15.49-86.2-34.34-86.2-34.34-11.64-29.57-28.42-37.45-28.42-37.45-23.27-15.84 1.73-15.55 1.73-15.55 25.69 1.81 39.21 26.38 39.21 26.38 22.84 39.12 59.92 27.82 74.5 21.27 2.33-16.54 8.94-27.82 16.25-34.22-56.84-6.43-116.6-28.43-116.6-126.49 0-27.95 10-50.8 26.35-68.69-2.63-6.48-11.42-32.5 2.51-67.75 0 0 21.49-6.88 70.4 26.24a242.65 242.65 0 0 1 128.18 0c48.87-33.13 70.33-26.24 70.33-26.24 14 35.25 5.18 61.27 2.55 67.75 16.41 17.9 26.31 40.75 26.31 68.69 0 98.35-59.85 120-116.88 126.32 9.19 7.9 17.38 23.53 17.38 47.41 0 34.22-.31 61.83-.31 70.23 0 6.85 4.61 14.81 17.6 12.31C438.72 464.97 512 369.08 512 256.02 512 114.62 397.37 0 256 0z\" fill=\"currentColor\" fill-rule=\"evenodd\"></path>\r\n          </svg>\r\n        </a>\r\n      </nav>\r\n\r\n      <Diceroll />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}